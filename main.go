package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"
	"unicode"

	"github.com/sqweek/dialog"
	"github.com/xuri/excelize/v2"
)

// Express√£o regular para validar nomes (somente letras, espa√ßos e pontos)
var nameRegex = regexp.MustCompile(`^[a-zA-Z√Ä-√∫\s.]+$`)

// Mat√©rias permitidas (sem acentos e min√∫sculas)
var validSubjects = map[string]bool{
	"matematica": true, "fisica": true, "quimica": true, "biologia": true,
	"redacao": true, "portugues": true, "geografia": true,
}

// Estrutura para armazenar os professoes
type Teacher struct {
	Name               string 
	Subject            string 
	NumberOfClasses    int    
	AvailableDays      string 
	AvailableHours     string 
}

// Fun√ß√£o para remover acentos e converter para min√∫sculas
func normalizeText(texto string) string {
	var result strings.Builder
	for _, char := range texto {
		switch char {
		case '√°', '√†', '√¢', '√£', '√§', '√Å', '√Ä', '√Ç', '√É', '√Ñ':
			result.WriteRune('a')
		case '√©', '√®', '√™', '√´', '√â', '√à', '√ä', '√ã':
			result.WriteRune('e')
		case '√≠', '√¨', '√Æ', '√Ø', '√ç', '√å', '√é', '√è':
			result.WriteRune('i')
		case '√≥', '√≤', '√¥', '√µ', '√∂', '√ì', '√í', '√î', '√ï', '√ñ':
			result.WriteRune('o')
		case '√∫', '√π', '√ª', '√º', '√ö', '√ô', '√õ', '√ú':
			result.WriteRune('u')
		case '√ß', '√á':
			result.WriteRune('c')
		default:
			result.WriteRune(unicode.ToLower(char)) // Transforma para min√∫sculas
		}
	}
	return result.String()
}

// Fun√ß√£o para validar e converter uma linha do Excel
func mapLineToTeacher(line []string) (*Teacher, error) {
	if len(line) < 5 {
		return nil, errors.New("Linha incompleta")
	}

	// Valida√ß√£o do Nome: deve conter letras, espa√ßos e pontos apenas
	name := strings.TrimSpace(line[0])
	if name == "" || !nameRegex.MatchString(name) {
		return nil, fmt.Errorf("Nome inv√°lido: '%s'", name)
	}

	// Valida√ß√£o da Mat√©ria
	subject := strings.TrimSpace(line[1])
	normalizedSubject := normalizeText(subject) // Remover acentos e converter para min√∫sculas
	if !validSubjects[normalizedSubject] {
		return nil, fmt.Errorf("mat√©ria inv√°lida para '%s': '%s'", name, subject)
	}

	// Valida√ß√£o da Quantidade de Aulas (deve ser um n√∫mero inteiro positivo)
	numberOfClasses, err := strconv.Atoi(strings.TrimSpace(line[2]))
	if err != nil || numberOfClasses <= 0 {
		return nil, fmt.Errorf("quantidade de aulas inv√°lida para '%s': '%s'", name, line[2])
	}

	// Dias e Hor√°rios (n√£o obrigat√≥rios, mas removemos espa√ßos extras)
	availableDays := strings.TrimSpace(line[3])
	availableHours := strings.TrimSpace(line[4])

	return &Teacher{
		Name:               name,
		Subject:            subject,
		NumberOfClasses:    numberOfClasses,
		AvailableDays:      availableDays,
		AvailableHours: 		availableHours,
	}, nil
}

func main() {
	file, err := dialog.File().Filter("Arquivos Excel", "xlsx").Title("Selecione o arquivo Excel").Load()
	if err != nil {
		log.Fatal("Nenhum arquivo foi selecionado:", err)
	}

	f, err := excelize.OpenFile(file)
	if err != nil {
		log.Fatal("Erro ao abrir o arquivo:", err)
	}

	tabs := f.GetSheetList()
	fmt.Println("Abas dispon√≠veis:", tabs)

	tab := "Dados"

	exists := false
	for _, name := range tabs {
		if name == tab {
			exists = true
			break
		}
	}
	if !exists {
		log.Fatal("Aba n√£o encontrada:", tab)
	}

	lines, err := f.GetRows(tab)
	if err != nil {
		log.Fatal("Erro ao ler a aba:", err)
	}

	if len(lines) < 2 {
		log.Fatal("Planilha vazia ou sem dados suficientes")
	}

	var Teachers []Teacher
	errorsOccurred := false

	for i, line := range lines[1:] {
		teacher, err := mapLineToTeacher(line)
		if err != nil {
			errorsOccurred = true
			fmt.Printf("‚ö†Ô∏è Erro na linha %d: %v\n", i+2, err)
		} else {
			Teachers = append(Teachers, *teacher)
		}
	}

	if errorsOccurred {
		fmt.Println("üö® Erros encontrados. Corrija os dados e tente novamente.")
		return
	}

	// üî• Convertendo para JSON e imprimindo na tela
	jsonData, err := json.MarshalIndent(Teachers, "", "  ")
	if err != nil {
		log.Fatal("Erro ao converter para JSON:", err)
	}

	fmt.Println("\nüìå Dados em JSON:")
	fmt.Println(string(jsonData))
}
